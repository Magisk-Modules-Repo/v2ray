#!/system/bin/sh

host_ip=""
inet_uid="3003"
proxy_port="65534"
iptables_wait="iptables"
proxy_for_app=false
appid_file="/data/v2ray/appid.list"
work_path="`dirname $0`"
find_outbound="${work_path}/v2ray-dns.keeper -o"

suit_iptables_version() {
  iptables_version=`iptables -V | grep -o "v1\.[0-9]"`
  if [ "${iptables_version}" = "v1.4" ] ; then
    ## fix options for lower version iptables
    export ANDROID_DATA=/data
    export ANDROID_ROOT=/system
    iptables_wait="iptables -w"
  elif [ "${iptables_version}" = "v1.6" ] || [ "${iptables_version}" = "v1.8" ] ; then
    iptables_wait="iptables -w 100"
  else
    iptables_wait="echo iptables"
  fi
}

find_netstat_path() {
  [ -f /system/bin/netstat ] && alias netstat="/system/bin/netstat" && return 0
  [ -f /system/xbin/netstat ] && alias netstat="/system/xbin/netstat" && return 0
  return 1
}

iptables_chain_exist() {
	local chain_list="$1"
	local target_chain="$2"
	if `echo "${chain_list}" | grep -q ":${target_chain} "` ; then 
		return 0
	fi
	return 1
}

probe_v2ray_listen() {
  find_netstat_path || return
  v2ray_listen=`netstat -unlp | grep v2ray`
  if eval "echo \"${v2ray_listen}\" | grep -q :::${proxy_port}" || eval "echo \"${v2ray_listen}\" | grep -q 0.0.0.0:${proxy_port}" ; then
    return
  else
    echo "[Error]: V2Ray service is not listening on port ${proxy_port} ."
    exit 1
  fi
}

probe_v2ray_target() {
  ## add eof to appid and softap file
  echo "" >> "${appid_file}"
  ## trim empty line in appid and softap file
  sed -i '/^$/d' "${appid_file}"
  ## probe proxy app
  if [ -f ${appid_file} ] ; then
    ## check appid_file is white-list or black-list
    if head -1 "${appid_file}" | grep -q 'bypass' ; then
      app_proxy_mode="skip"
    else
      app_proxy_mode="pick"
    fi
    ## filter appid number
    while read appid_line ; do
      appid_text=(`echo ${appid_line}`)
      for appid_word in ${appid_text[*]} ; do
        if echo "${appid_word}" | grep -q '#' ; then
          break
        elif [ "${appid_word}" -ge 0 ] 2>/dev/null ; then
          appid_list=(${appid_list[*]} ${appid_word})
        fi
      done
    done < ${appid_file}
  fi
  ## check proxy app or not
  if ( [ "${app_proxy_mode}" = "skip" ] || ( [ "${app_proxy_mode}" = "pick" ] && [ ${#appid_list[@]} -gt 0 ] ) ) ; then
    proxy_for_app=true
  fi
  ## check enable proxy iptables or not
  if ! ${proxy_for_app} ; then
    echo "[Error]: V2Ray service is not proxy for APP."
    exit 1
  fi
}

probe_uid_app_name() {
  app_handle="$2"
  if [ "$1" == "0" ] ; then
  	app_name="root"
  else
  	app_name=`grep " $1 " /data/system/packages.list | cut -d ' ' -f 1`
  	app_name=`echo ${app_name} | sed 's/ / \& /g'`
  fi
  if [ "${app_name}" != "" ] ; then
    echo "[Info]: ${app_handle} ${app_name} APP's DNS request."
  else
    echo "[Warning]: APP with uid=$1 is not found."
    return 1
  fi
}

proxy_app_dns_iptables() {
  ## create iptables proxy chains for app tcp
  ${iptables_wait} -t nat -N APP_DNS_PROXY
  ## bypass v2ray program
  ${iptables_wait} -t nat -A APP_DNS_PROXY -m owner --uid-owner ${inet_uid} -j RETURN
  ## white-list mode
  if [ "${app_proxy_mode}" = "pick" ] ; then
    ## proxy all apps network
    if [ "${appid_list[*]}" = "0" ] ; then
      echo "[Info]: Proxy all APP's DNS request."
      ${iptables_wait} -t nat -A APP_DNS_PROXY -m owner ! --uid-owner ${inet_uid} -j V2RAY_APP_DNS
    ## proxy assign app
    else
      for appid in ${appid_list[@]}; do
        probe_uid_app_name ${appid} "Proxy" && \
        ${iptables_wait} -t nat -A APP_DNS_PROXY -m owner --uid-owner ${appid} -j V2RAY_APP_DNS
      done
    fi
  ## black-list mode
  elif [ "${app_proxy_mode}" = "skip" ] ; then
    for appid in ${appid_list[@]}; do
      probe_uid_app_name ${appid} "Ignore" && \
      ${iptables_wait} -t nat -A APP_DNS_PROXY -m owner --uid-owner ${appid} -j RETURN
    done
    echo "[Info]: Proxy all remaining APP's DNS request."
    ${iptables_wait} -t nat -A APP_DNS_PROXY -m owner ! --uid-owner ${inet_uid} -j V2RAY_APP_DNS
  fi
  ## apply proxy rules to iptables
  ${iptables_wait} -t nat -A OUTPUT -p udp --dport 53 -j APP_DNS_PROXY
}

create_proxy_iptables() {
  while [ "${host_ip}" == "" ] || [ "${host_ip}" == "0.0.0.0" ] || [ "${host_ip}" == "127.0.0.1" ] ; do
    host_ip=`${find_outbound}`
    sleep 2
  done
  local iptables_chains=`iptables-save -t nat | cut -d ' ' -f 1 | tr "\n" " " | grep -o ":[0-9A-Z_]* "`
  if ! iptables_chain_exist "${iptables_chains}" "V2RAY_APP_DNS" ; then
	  ## create basic iptables proxy chains
	  echo "[Info]: Create DNS proxy chains to ${host_ip}:${proxy_port}"
	  ${iptables_wait} -t nat -N V2RAY_APP_DNS
  else
	  ## flush basic iptables proxy chains
	  echo "[Info]: Rebuild DNS proxy chains to ${host_ip}:${proxy_port}"
  	${iptables_wait} -t nat -F V2RAY_APP_DNS
  fi
  ## build basic iptables proxy chains
  ${iptables_wait} -t nat -A V2RAY_APP_DNS -p udp -j DNAT --to-destination ${host_ip}:${proxy_port}

  if ! iptables_chain_exist "${iptables_chains}" "APP_DNS_PROXY" && ${proxy_for_app} ; then
	  ## proxy app network
	  proxy_app_dns_iptables
	fi
}

flush_endpoint_iptables() {
  ${iptables_wait} -t nat -F V2RAY_APP_DNS 2>/dev/null
}

flush_nat_iptables() {
  echo "[Info]: Clean nat proxy iptables rules."
  local iptables_chains=`iptables-save -t nat | cut -d ' ' -f 1 | tr "\n" " " | grep -o ":[0-9A-Z_]* "`
  ${iptables_wait} -t nat -D OUTPUT -p udp --dport 53 -j APP_DNS_PROXY 2>/dev/null
  if iptables_chain_exist "${iptables_chains}" "APP_DNS_PROXY" ; then
    ${iptables_wait} -t nat -F APP_DNS_PROXY
    ${iptables_wait} -t nat -X APP_DNS_PROXY
  fi
  if iptables_chain_exist "${iptables_chains}" "V2RAY_APP_DNS" ; then
    ${iptables_wait} -t nat -F V2RAY_APP_DNS
    ${iptables_wait} -t nat -X V2RAY_APP_DNS
  fi
  unset iptables_chains
}

disable_proxy() {
  flush_nat_iptables
}

case "$1" in
  enable)
    flush_endpoint_iptables
    probe_v2ray_listen
    probe_v2ray_target
    sleep 2
    create_proxy_iptables
    ;;
  disable)
    disable_proxy
    ;;
  *)
    echo "usage:  $0 {enable|disable}"
    ;;
esac
